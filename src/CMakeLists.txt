# TODO: OSX and LIB_ONLY seem to require this to go to binary dir only
if(NOT TOKEN_AUTH_ONLY)
endif()

set(synclib_NAME ${APPLICATION_EXECUTABLE}sync)

find_package(Qt5 5.6 COMPONENTS Core Network Xml Concurrent WebEngineWidgets WebEngine REQUIRED)
if (Qt5Core_VERSION VERSION_LESS 5.9.0)
message(STATUS "For HTTP/2 support, compile with Qt 5.9 or higher.")
endif()

if(NOT TOKEN_AUTH_ONLY)
    find_package(Qt5Keychain REQUIRED)
endif()

if(NOT MSVC)
  if(NOT (CMAKE_SYSTEM_PROCESSOR MATCHES "^(alpha|parisc|hppa)"))
    if((CMAKE_CXX_COMPILER_ID MATCHES "GNU") AND (CMAKE_CXX_COMPILER_VERSION VERSION_LESS 4.9))
      set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fstack-protector --param=ssp-buffer-size=4")
      set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fstack-protector --param=ssp-buffer-size=4")
    else()
      set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fstack-protector-strong")
      set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fstack-protector-strong")
    endif()
  endif()

  string(TOLOWER "${CMAKE_BUILD_TYPE}" CMAKE_BUILD_TYPE_LOWER)
  if(CMAKE_BUILD_TYPE_LOWER MATCHES "(release|relwithdebinfo|minsizerel)")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -D_FORTIFY_SOURCE=2")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D_FORTIFY_SOURCE=2")
  endif()

  # Calling Qt's qCWarning(category, ...) with no params for "..." is a GNU
  # extension (C++11 ยง16.3/4 forbids them). Silence clang's warnings.
  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wno-gnu-zero-variadic-macro-arguments")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-gnu-zero-variadic-macro-arguments")
endif()

if(WIN32)
  # Enable DEP & ASLR
  set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} /nxcompat /dynamicbase")
  set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} /nxcompat /dynamicbase")
elseif(UNIX AND NOT APPLE)
  set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -Wl,-z,relro -Wl,-z,now")
  set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -Wl,-z,relro -Wl,-z,now")
endif()

include_directories(
    ${CMAKE_SOURCE_DIR}/src/3rdparty
)
if(LOCAL_FOLDER_ENCRYPTION)
    add_subdirectory(cryptfs)
endif()

option(CS_REDIRECT_ERRORS_TO_FILE
    "Redirect output of the ERROR function to /tmp/cs_log_error" OFF)
if(CS_REDIRECT_ERRORS_TO_FILE)
    message(STATUS "CS_REDIRECT_ERRORS_TO_FILE ON")
    add_definitions(-DCS_REDIRECT_ERRORS_TO_FILE)
endif()

option(CS_REDIRECT_ERRORS_TO_LOGGER
    "Redirect output of the ERROR function to the application logger" OFF)
if(CS_REDIRECT_ERRORS_TO_LOGGER)
    message(STATUS "CS_REDIRECT_ERRORS_TO_LOGGER ON")
    add_definitions(-DCS_REDIRECT_ERRORS_TO_LOGGER)
endif()

option(CS_ENABLE_DEBUG "Enable output from the LOG function" OFF)
if(CS_ENABLE_DEBUG)
    message(STATUS "CS_ENABLE_DEBUG ON")
    add_definitions(-DCS_ENABLE_DEBUG)
endif()

option(CS_REDIRECT_DEBUG_TO_LOGGER
    "Redirect output of the LOG function to the application logger" OFF)
if(CS_REDIRECT_DEBUG_TO_LOGGER)
    message(STATUS "CS_REDIRECT_DEBUG_TO_LOGGER ON")
    add_definitions(-DCS_REDIRECT_DEBUG_TO_LOGGER)
endif()

option(CS_REDIRECT_DEBUG_TO_FILE
    "Redirect output of the LOG function to /tmp/cs_log_debug" OFF)
if(CS_REDIRECT_DEBUG_TO_FILE)
    message(STATUS "CS_REDIRECT_DEBUG_TO_FILE ON")
    add_definitions(-DCS_REDIRECT_DEBUG_TO_FILE)
endif()

option(CS_ALL_MODULES_DEBUG
    "Get output from the LOG function reguardless of ENABLE_MODULE_DEBUG definitions"
    OFF)
if(CS_ALL_MODULES_DEBUG)
    message(STATUS "CS_ALL_MODULES_DEBUG ON")
    add_definitions(-DCS_ALL_MODULES_DEBUG)
endif()

add_subdirectory(csync)
add_subdirectory(libsync)
if (NOT BUILD_LIBRARIES_ONLY)
    add_subdirectory(gui)
    add_subdirectory(cmd)

    if (WITH_CRASHREPORTER)
        add_subdirectory(3rdparty/libcrashreporter-qt)
        add_subdirectory(crashreporter)
    endif()
endif(NOT BUILD_LIBRARIES_ONLY)

find_program(KRAZY2_EXECUTABLE krazy2)
if(KRAZY2_EXECUTABLE)
    # s/y k/y ALL k/ for building this target always
    add_custom_target( krazy krazy2 --check-sets c++,qt4,foss
                       ${PROJECT_SOURCE_DIR}/src/libsync/*.ui
                       ${PROJECT_SOURCE_DIR}/src/libsync/*.h
                       ${PROJECT_SOURCE_DIR}/src/libsync/*.cpp
                       ${PROJECT_SOURCE_DIR}/src/gui/*.ui
                       ${PROJECT_SOURCE_DIR}/src/gui/*.h
                       ${PROJECT_SOURCE_DIR}/src/gui/*.cpp
                       ${PROJECT_SOURCE_DIR}/src/cmd/*.h
                       ${PROJECT_SOURCE_DIR}/src/cmd/*.cpp
)
endif()
